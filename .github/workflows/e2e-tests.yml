name: E2E Tests - AKS Cluster Provisioning

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'idp-platform/frontend/**'
      - 'idp-platform/backend/**'
      - 'idp-platform/k8s-manifests/**'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'idp-platform/frontend/**'
      - 'idp-platform/backend/**'
      - 'idp-platform/k8s-manifests/**'
  schedule:
    # Run nightly full tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - dry-run
          - production
          - all
      cleanup_resources:
        description: 'Cleanup Azure resources after tests'
        required: false
        default: true
        type: boolean
      skip_azure_validation:
        description: 'Skip Azure resource validation'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  AZURE_LOCATION: 'uksouth'
  TEST_CLUSTER_PREFIX: 'ci-e2e-test'

jobs:
  # Smoke tests - quick validation
  smoke-tests:
    if: github.event_name != 'workflow_dispatch' || inputs.test_type == 'smoke' || inputs.test_type == 'all'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          idp-platform/frontend/package-lock.json
          idp-platform/backend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd idp-platform/frontend
        npm ci

    - name: Install backend dependencies
      run: |
        cd idp-platform/backend
        npm ci

    - name: Setup test environment
      run: |
        cd idp-platform/frontend
        ./cypress/scripts/setup-test-environment.sh verify

    - name: Start backend server
      run: |
        cd idp-platform/backend
        npm start &
        sleep 10
      env:
        PORT: 3001

    - name: Start frontend server
      run: |
        cd idp-platform/frontend
        npm start &
        sleep 30
      env:
        PORT: 3000
        CI: false

    - name: Wait for services
      run: |
        npx wait-on http://localhost:3001/health http://localhost:3000 --timeout 60000

    - name: Run smoke tests
      run: |
        cd idp-platform/frontend
        npm run test:e2e:smoke
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:3001
        SKIP_AZURE_VALIDATION: true
        CLEANUP_AFTER_TESTS: false

    - name: Upload smoke test videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: smoke-test-videos
        path: idp-platform/frontend/cypress/videos
        retention-days: 7

    - name: Upload smoke test screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: smoke-test-screenshots
        path: idp-platform/frontend/cypress/screenshots
        retention-days: 7

  # Dry-run tests - full workflow simulation
  dry-run-tests:
    if: github.event_name != 'workflow_dispatch' || inputs.test_type == 'dry-run' || inputs.test_type == 'all'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: smoke-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          idp-platform/frontend/package-lock.json
          idp-platform/backend/package-lock.json

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Minikube
      uses: medyagh/setup-minikube@v0.0.14
      with:
        minikube-version: 1.32.0
        driver: docker
        cpus: 2
        memory: 4096

    - name: Install dependencies
      run: |
        cd idp-platform/frontend && npm ci
        cd ../backend && npm ci

    - name: Install required CRDs
      run: |
        # Install test CRDs for dry-run validation
        kubectl create namespace azure-system --dry-run=client -o yaml | kubectl apply -f -
        kubectl create namespace argo --dry-run=client -o yaml | kubectl apply -f -
        
        # Install minimal CRDs for testing
        cat <<EOF | kubectl apply -f -
        apiVersion: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        metadata:
          name: aksclusters.kro.run
        spec:
          group: kro.run
          versions:
          - name: v1alpha1
            served: true
            storage: true
            schema:
              openAPIV3Schema:
                type: object
                properties:
                  spec:
                    type: object
                  status:
                    type: object
          scope: Namespaced
          names:
            plural: aksclusters
            singular: akscluster
            kind: AKSCluster
        EOF

    - name: Start services
      run: |
        cd idp-platform/backend && npm start &
        cd ../frontend && npm start &
        sleep 30

    - name: Wait for services
      run: |
        npx wait-on http://localhost:3001/health http://localhost:3000 --timeout 60000

    - name: Run dry-run tests
      run: |
        cd idp-platform/frontend
        npm run test:e2e:dry-run
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:3001
        SKIP_AZURE_VALIDATION: true
        CLEANUP_AFTER_TESTS: ${{ github.event.inputs.cleanup_resources || 'true' }}
        TEST_CLUSTER_PREFIX: ${{ env.TEST_CLUSTER_PREFIX }}

    - name: Upload dry-run test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dry-run-test-artifacts
        path: |
          idp-platform/frontend/cypress/videos
          idp-platform/frontend/cypress/screenshots
        retention-days: 7

  # Production tests - real Azure resources (only on manual trigger or scheduled)
  production-tests:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.test_type == 'production' || inputs.test_type == 'all')) ||
      github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [smoke-tests, dry-run-tests]
    environment: production-testing

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          idp-platform/frontend/package-lock.json
          idp-platform/backend/package-lock.json

    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Verify Azure authentication
      run: |
        az account show
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install dependencies
      run: |
        cd idp-platform/frontend && npm ci
        cd ../backend && npm ci

    - name: Setup production test environment
      run: |
        cd idp-platform/frontend
        ./cypress/scripts/setup-test-environment.sh kubectl

    - name: Start services
      run: |
        cd idp-platform/backend && npm start &
        cd ../frontend && npm start &
        sleep 30

    - name: Wait for services
      run: |
        npx wait-on http://localhost:3001/health http://localhost:3000 --timeout 60000

    - name: Run production tests
      run: |
        cd idp-platform/frontend
        npm run test:e2e:production
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:3001
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP || 'rg-ci-e2e-testing' }}
        SKIP_AZURE_VALIDATION: ${{ github.event.inputs.skip_azure_validation || 'false' }}
        CLEANUP_AFTER_TESTS: ${{ github.event.inputs.cleanup_resources || 'true' }}
        TEST_CLUSTER_PREFIX: ${{ env.TEST_CLUSTER_PREFIX }}
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

    - name: Generate Azure validation report
      if: always()
      run: |
        cd idp-platform/frontend
        # Find any created test clusters and generate validation reports
        for cluster in $(az aks list --query "[?contains(name, '${{ env.TEST_CLUSTER_PREFIX }}')].name" -o tsv); do
          echo "Generating validation report for cluster: $cluster"
          node cypress/scripts/validate-azure-resources.js "$cluster" > "validation-report-$cluster.json" || true
        done

    - name: Cleanup Azure resources
      if: always() && (github.event.inputs.cleanup_resources == 'true' || github.event.inputs.cleanup_resources == '')
      run: |
        cd idp-platform/frontend
        node cypress/scripts/cleanup-azure-resources.js --pattern ${{ env.TEST_CLUSTER_PREFIX }} --force

    - name: Upload production test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-test-artifacts
        path: |
          idp-platform/frontend/cypress/videos
          idp-platform/frontend/cypress/screenshots
          idp-platform/frontend/validation-report-*.json
        retention-days: 30

  # Test summary and notification
  test-summary:
    if: always()
    runs-on: ubuntu-latest
    needs: [smoke-tests, dry-run-tests, production-tests]
    
    steps:
    - name: Create test summary
      run: |
        echo "# E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Execution Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Smoke tests
        if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
          echo "✅ **Smoke Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.smoke-tests.result }}" == "failure" ]; then
          echo "❌ **Smoke Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.smoke-tests.result }}" == "skipped" ]; then
          echo "⏭️ **Smoke Tests**: SKIPPED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Dry-run tests
        if [ "${{ needs.dry-run-tests.result }}" == "success" ]; then
          echo "✅ **Dry-run Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.dry-run-tests.result }}" == "failure" ]; then
          echo "❌ **Dry-run Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.dry-run-tests.result }}" == "skipped" ]; then
          echo "⏭️ **Dry-run Tests**: SKIPPED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Production tests
        if [ "${{ needs.production-tests.result }}" == "success" ]; then
          echo "✅ **Production Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.production-tests.result }}" == "failure" ]; then
          echo "❌ **Production Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.production-tests.result }}" == "skipped" ]; then
          echo "⏭️ **Production Tests**: SKIPPED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "- **Test Type**: ${{ github.event.inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cleanup Resources**: ${{ github.event.inputs.cleanup_resources }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Azure Validation**: ${{ github.event.inputs.skip_azure_validation }}" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check overall status
      run: |
        if [ "${{ needs.smoke-tests.result }}" == "failure" ] || 
           [ "${{ needs.dry-run-tests.result }}" == "failure" ] || 
           [ "${{ needs.production-tests.result }}" == "failure" ]; then
          echo "❌ Some tests failed"
          exit 1
        else
          echo "✅ All tests passed or were skipped"
        fi