#!/bin/bash
set -euo pipefail

# IDP External Access and Ingress Validation Script
# Tests external connectivity, TLS certificates, DNS resolution, and Istio Gateway configuration

# Configuration
NAMESPACE="idp-platform"
DOMAIN="idp.davidmarkgardiner.co.uk"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging functions
function print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✓${NC} $2"
    else
        echo -e "${RED}✗${NC} $2"
    fi
}

function print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

function print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

function print_section() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

function test_dns_resolution() {
    print_section \"DNS Resolution Testing\"\n    \n    print_info \"Testing DNS resolution for $DOMAIN...\"\n    if nslookup $DOMAIN &>/dev/null; then\n        print_status 0 \"DNS resolution for $DOMAIN working\"\n        \n        # Get the resolved IP\n        RESOLVED_IP=$(nslookup $DOMAIN | grep -A 1 \"Name:\" | tail -n 1 | awk '{print $2}' || echo \"unknown\")\n        echo \"   Resolved IP: $RESOLVED_IP\"\n    else\n        print_status 1 \"DNS resolution for $DOMAIN failed\"\n        return 1\n    fi\n    \n    # Test from within cluster\n    print_info \"Testing DNS resolution from within cluster...\"\n    if kubectl run dns-test-external --rm -i --restart=Never --image=curlimages/curl:latest --timeout=30s -- \\\n       nslookup $DOMAIN &>/dev/null; then\n        print_status 0 \"Internal DNS resolution working\"\n    else\n        print_warning \"Internal DNS resolution failed (may be expected if external-dns not configured)\"\n    fi\n}\n\nfunction test_http_connectivity() {\n    print_section \"HTTP Connectivity Testing\"\n    \n    print_info \"Testing HTTP connectivity to $DOMAIN...\"\n    if curl -I -s --connect-timeout 10 http://$DOMAIN &>/dev/null; then\n        HTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" http://$DOMAIN 2>/dev/null || echo \"000\")\n        if [ \"$HTTP_STATUS\" = \"301\" ] || [ \"$HTTP_STATUS\" = \"302\" ] || [ \"$HTTP_STATUS\" = \"200\" ]; then\n            print_status 0 \"HTTP connectivity working (status: $HTTP_STATUS)\"\n        else\n            print_warning \"HTTP responded with status: $HTTP_STATUS\"\n        fi\n    else\n        print_status 1 \"HTTP connectivity failed\"\n    fi\n}\n\nfunction test_https_connectivity() {\n    print_section \"HTTPS Connectivity Testing\"\n    \n    print_info \"Testing HTTPS connectivity to $DOMAIN...\"\n    if curl -I -s --connect-timeout 10 https://$DOMAIN &>/dev/null; then\n        HTTPS_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" https://$DOMAIN 2>/dev/null || echo \"000\")\n        print_status 0 \"HTTPS connectivity working (status: $HTTPS_STATUS)\"\n        \n        # Test certificate validity\n        print_info \"Checking TLS certificate...\"\n        CERT_INFO=$(echo | openssl s_client -connect $DOMAIN:443 -servername $DOMAIN 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo \"failed\")\n        if [ \"$CERT_INFO\" != \"failed\" ]; then\n            print_status 0 \"TLS certificate is valid\"\n            echo \"$CERT_INFO\" | sed 's/^/   /'\n        else\n            print_warning \"Could not verify TLS certificate\"\n        fi\n    else\n        print_status 1 \"HTTPS connectivity failed\"\n    fi\n}\n\nfunction test_istio_gateway() {\n    print_section \"Istio Gateway Validation\"\n    \n    # Check if Istio is installed\n    if kubectl get namespace istio-system &>/dev/null; then\n        print_status 0 \"Istio system namespace found\"\n        \n        # Check for Istio gateways in the namespace\n        if kubectl get gateway -n $NAMESPACE &>/dev/null; then\n            GATEWAY_COUNT=$(kubectl get gateway -n $NAMESPACE --no-headers | wc -l)\n            print_status 0 \"Found $GATEWAY_COUNT Istio Gateway(s) in namespace\"\n            \n            # List gateways\n            print_info \"Gateway details:\"\n            kubectl get gateway -n $NAMESPACE -o wide | sed 's/^/   /'\n            \n            # Check gateway configuration\n            kubectl get gateway -n $NAMESPACE -o yaml | grep -E \"(hosts:|secretName:)\" | sed 's/^/   /' || true\n        else\n            print_warning \"No Istio Gateways found in namespace\"\n        fi\n        \n        # Check for VirtualServices\n        if kubectl get virtualservice -n $NAMESPACE &>/dev/null; then\n            VS_COUNT=$(kubectl get virtualservice -n $NAMESPACE --no-headers | wc -l)\n            print_status 0 \"Found $VS_COUNT VirtualService(s) in namespace\"\n            \n            # Show VirtualService details\n            print_info \"VirtualService details:\"\n            kubectl get virtualservice -n $NAMESPACE -o wide | sed 's/^/   /'\n        else\n            print_warning \"No VirtualServices found in namespace\"\n        fi\n        \n        # Check Istio ingress gateway\n        if kubectl get service istio-ingressgateway -n istio-system &>/dev/null; then\n            print_status 0 \"Istio ingress gateway service found\"\n            \n            # Get external IP\n            EXTERNAL_IP=$(kubectl get service istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo \"pending\")\n            echo \"   External IP: $EXTERNAL_IP\"\n        else\n            print_warning \"Istio ingress gateway service not found\"\n        fi\n    else\n        print_info \"Istio not detected - checking for standard Kubernetes ingress\"\n        test_kubernetes_ingress\n    fi\n}\n\nfunction test_kubernetes_ingress() {\n    print_section \"Kubernetes Ingress Validation\"\n    \n    if kubectl get ingress -n $NAMESPACE &>/dev/null; then\n        INGRESS_COUNT=$(kubectl get ingress -n $NAMESPACE --no-headers | wc -l)\n        print_status 0 \"Found $INGRESS_COUNT Kubernetes Ingress(es) in namespace\"\n        \n        # Show ingress details\n        print_info \"Ingress details:\"\n        kubectl get ingress -n $NAMESPACE -o wide | sed 's/^/   /'\n        \n        # Check ingress controller\n        if kubectl get pods -n kube-system -l app.kubernetes.io/name=ingress-nginx &>/dev/null; then\n            print_status 0 \"Nginx ingress controller found\"\n        elif kubectl get pods -A -l app=traefik &>/dev/null; then\n            print_status 0 \"Traefik ingress controller found\"\n        else\n            print_warning \"No common ingress controller found\"\n        fi\n    else\n        print_warning \"No Kubernetes Ingress resources found\"\n    fi\n}\n\nfunction test_certificate_management() {\n    print_section \"Certificate Management Validation\"\n    \n    # Check for cert-manager\n    if kubectl get namespace cert-manager &>/dev/null; then\n        print_status 0 \"Cert-manager namespace found\"\n        \n        # Check cert-manager pods\n        CERT_MANAGER_PODS=$(kubectl get pods -n cert-manager --no-headers | grep \"Running\" | wc -l)\n        print_info \"Cert-manager has $CERT_MANAGER_PODS running pods\"\n        \n        # Check for certificates in the namespace\n        if kubectl get certificate -n $NAMESPACE &>/dev/null; then\n            CERT_COUNT=$(kubectl get certificate -n $NAMESPACE --no-headers | wc -l)\n            print_status 0 \"Found $CERT_COUNT certificate(s) in namespace\"\n            \n            # Show certificate status\n            print_info \"Certificate details:\"\n            kubectl get certificate -n $NAMESPACE -o wide | sed 's/^/   /'\n            \n            # Check certificate readiness\n            kubectl get certificate -n $NAMESPACE --no-headers | while read line; do\n                CERT_NAME=$(echo $line | awk '{print $1}')\n                READY=$(echo $line | awk '{print $2}')\n                \n                if [ \"$READY\" = \"True\" ]; then\n                    print_status 0 \"Certificate $CERT_NAME is ready\"\n                else\n                    print_status 1 \"Certificate $CERT_NAME is not ready\"\n                fi\n            done\n        else\n            print_warning \"No certificates found in namespace\"\n        fi\n        \n        # Check for ClusterIssuers\n        if kubectl get clusterissuer &>/dev/null; then\n            ISSUER_COUNT=$(kubectl get clusterissuer --no-headers | wc -l)\n            print_info \"Found $ISSUER_COUNT ClusterIssuer(s)\"\n            kubectl get clusterissuer -o wide | sed 's/^/   /'\n        fi\n    else\n        print_info \"Cert-manager not found - checking for manual certificates\"\n        \n        # Check for TLS secrets\n        if kubectl get secret -n $NAMESPACE -o jsonpath='{.items[?(@.type==\"kubernetes.io/tls\")].metadata.name}' | grep -q .; then\n            print_status 0 \"Found TLS secrets in namespace\"\n            kubectl get secret -n $NAMESPACE -o jsonpath='{.items[?(@.type==\"kubernetes.io/tls\")].metadata.name}' | tr ' ' '\\n' | sed 's/^/   /'\n        else\n            print_warning \"No TLS secrets found in namespace\"\n        fi\n    fi\n}\n\nfunction test_load_balancer() {\n    print_section \"Load Balancer Validation\"\n    \n    # Check for LoadBalancer services\n    LB_SERVICES=$(kubectl get service -A --field-selector spec.type=LoadBalancer --no-headers | wc -l)\n    print_info \"Found $LB_SERVICES LoadBalancer service(s) cluster-wide\"\n    \n    if [ \"$LB_SERVICES\" -gt 0 ]; then\n        print_info \"LoadBalancer services:\"\n        kubectl get service -A --field-selector spec.type=LoadBalancer -o wide | sed 's/^/   /'\n        \n        # Check external IPs\n        kubectl get service -A --field-selector spec.type=LoadBalancer --no-headers | while read line; do\n            NAMESPACE_SVC=$(echo $line | awk '{print $1}')\n            SERVICE_NAME=$(echo $line | awk '{print $2}')\n            EXTERNAL_IP=$(echo $line | awk '{print $4}')\n            \n            if [ \"$EXTERNAL_IP\" != \"<pending>\" ] && [ \"$EXTERNAL_IP\" != \"<none>\" ]; then\n                print_status 0 \"Service $SERVICE_NAME in $NAMESPACE_SVC has external IP: $EXTERNAL_IP\"\n            else\n                print_warning \"Service $SERVICE_NAME in $NAMESPACE_SVC has no external IP (status: $EXTERNAL_IP)\"\n            fi\n        done\n    else\n        print_info \"No LoadBalancer services found\"\n    fi\n}\n\nfunction test_external_dns() {\n    print_section \"External DNS Validation\"\n    \n    # Check for external-dns\n    if kubectl get pods -A -l app.kubernetes.io/name=external-dns &>/dev/null; then\n        print_status 0 \"External-DNS found\"\n        \n        # Check external-dns pods\n        EXTERNAL_DNS_PODS=$(kubectl get pods -A -l app.kubernetes.io/name=external-dns --no-headers | grep \"Running\" | wc -l)\n        print_info \"External-DNS has $EXTERNAL_DNS_PODS running pods\"\n        \n        # Check external-dns logs for errors\n        print_info \"Checking external-dns logs for recent activity...\"\n        EXTERNAL_DNS_NAMESPACE=$(kubectl get pods -A -l app.kubernetes.io/name=external-dns --no-headers | head -1 | awk '{print $1}')\n        EXTERNAL_DNS_POD=$(kubectl get pods -A -l app.kubernetes.io/name=external-dns --no-headers | head -1 | awk '{print $2}')\n        \n        if [ -n \"$EXTERNAL_DNS_POD\" ]; then\n            kubectl logs $EXTERNAL_DNS_POD -n $EXTERNAL_DNS_NAMESPACE --tail=10 | sed 's/^/   /' || true\n        fi\n    else\n        print_info \"External-DNS not found (DNS may be managed externally)\"\n    fi\n}\n\nfunction test_application_endpoints() {\n    print_section \"Application Endpoint Testing\"\n    \n    print_info \"Testing IDP application endpoints...\"\n    \n    # Test main application\n    if curl -f -s --connect-timeout 10 https://$DOMAIN/ &>/dev/null; then\n        print_status 0 \"Main application endpoint accessible\"\n        \n        # Check if it returns expected content\n        CONTENT=$(curl -s https://$DOMAIN/ | grep -i \"AKS Internal Developer Platform\" || echo \"not found\")\n        if [ \"$CONTENT\" != \"not found\" ]; then\n            print_status 0 \"Application content verified\"\n        else\n            print_warning \"Application content not as expected\"\n        fi\n    else\n        print_status 1 \"Main application endpoint not accessible\"\n    fi\n    \n    # Test API endpoints\n    API_ENDPOINTS=(\n        \"/api/health\"\n        \"/api/clusters\"\n        \"/api/workflows\"\n        \"/api/azure/locations\"\n    )\n    \n    for endpoint in \"${API_ENDPOINTS[@]}\"; do\n        print_info \"Testing API endpoint: $endpoint\"\n        if curl -f -s --connect-timeout 10 https://$DOMAIN$endpoint &>/dev/null; then\n            print_status 0 \"API endpoint $endpoint accessible\"\n        else\n            print_warning \"API endpoint $endpoint not accessible (may be expected)\"\n        fi\n    done\n}\n\nfunction test_security_headers() {\n    print_section \"Security Headers Validation\"\n    \n    print_info \"Checking security headers...\"\n    \n    HEADERS=$(curl -I -s https://$DOMAIN/ 2>/dev/null || echo \"failed\")\n    \n    if [ \"$HEADERS\" != \"failed\" ]; then\n        # Check for common security headers\n        if echo \"$HEADERS\" | grep -i \"strict-transport-security\" &>/dev/null; then\n            print_status 0 \"HSTS header present\"\n        else\n            print_warning \"HSTS header not found\"\n        fi\n        \n        if echo \"$HEADERS\" | grep -i \"x-frame-options\" &>/dev/null; then\n            print_status 0 \"X-Frame-Options header present\"\n        else\n            print_warning \"X-Frame-Options header not found\"\n        fi\n        \n        if echo \"$HEADERS\" | grep -i \"x-content-type-options\" &>/dev/null; then\n            print_status 0 \"X-Content-Type-Options header present\"\n        else\n            print_warning \"X-Content-Type-Options header not found\"\n        fi\n        \n        # Show all headers for debugging\n        print_info \"Response headers:\"\n        echo \"$HEADERS\" | sed 's/^/   /'\n    else\n        print_status 1 \"Could not retrieve headers\"\n    fi\n}\n\nfunction test_websocket_connectivity() {\n    print_section \"WebSocket Connectivity Testing\"\n    \n    print_info \"Testing WebSocket connectivity...\"\n    \n    # Test WebSocket upgrade (basic connectivity test)\n    if curl -I -s --http1.1 -H \"Connection: Upgrade\" -H \"Upgrade: websocket\" \\\n       -H \"Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\" \\\n       -H \"Sec-WebSocket-Version: 13\" \\\n       https://$DOMAIN/ &>/dev/null; then\n        print_status 0 \"WebSocket upgrade request successful\"\n    else\n        print_warning \"WebSocket upgrade may not be supported (could be normal)\"\n    fi\n}\n\nfunction generate_external_access_report() {\n    print_section \"External Access Summary Report\"\n    \n    echo \"Domain: $DOMAIN\"\n    echo \"Namespace: $NAMESPACE\"\n    echo \"Timestamp: $(date)\"\n    \n    # DNS status\n    if nslookup $DOMAIN &>/dev/null; then\n        echo \"DNS Resolution: ✓ Working\"\n    else\n        echo \"DNS Resolution: ✗ Failed\"\n    fi\n    \n    # HTTP/HTTPS status\n    HTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" http://$DOMAIN 2>/dev/null || echo \"000\")\n    HTTPS_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" https://$DOMAIN 2>/dev/null || echo \"000\")\n    \n    echo \"HTTP Status: $HTTP_STATUS\"\n    echo \"HTTPS Status: $HTTPS_STATUS\"\n    \n    # Certificate status\n    if echo | openssl s_client -connect $DOMAIN:443 -servername $DOMAIN 2>/dev/null | openssl x509 -noout -dates &>/dev/null; then\n        echo \"TLS Certificate: ✓ Valid\"\n    else\n        echo \"TLS Certificate: ✗ Invalid or not found\"\n    fi\n    \n    # Infrastructure components\n    if kubectl get namespace istio-system &>/dev/null; then\n        echo \"Service Mesh: ✓ Istio detected\"\n    else\n        echo \"Service Mesh: - Not detected\"\n    fi\n    \n    if kubectl get namespace cert-manager &>/dev/null; then\n        echo \"Certificate Management: ✓ Cert-manager detected\"\n    else\n        echo \"Certificate Management: - Not detected\"\n    fi\n}\n\n# Main execution\nfunction main() {\n    echo \"IDP External Access and Ingress Validation Script\"\n    echo \"=================================================\"\n    echo \"Testing external access for IDP platform...\"\n    echo \"Domain: $DOMAIN\"\n    echo \"Namespace: $NAMESPACE\"\n    echo \"Timestamp: $(date)\"\n    \n    test_dns_resolution\n    test_http_connectivity\n    test_https_connectivity\n    test_istio_gateway\n    test_certificate_management\n    test_load_balancer\n    test_external_dns\n    test_application_endpoints\n    test_security_headers\n    test_websocket_connectivity\n    generate_external_access_report\n    \n    echo -e \"\\n${GREEN}External access validation completed!${NC}\"\n}\n\n# Execute main function\nmain \"$@\"